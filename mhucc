#!/bin/bash
# mhucc - multi-host user collision check
# ("Muck.")
#
# Check for the existence of a username on multiple hosts, according to a list
# of files.
#
# Written by Aaron Bugher for the FSU Biology Department.
#
# LICENSE:
#
# Copyright (c) 2013, Florida State University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are
# those of the authors and should not be interpreted as representing official
# policies, either expressed or implied, of the FreeBSD Project.
#
# END LICENSE


# TODO:
# - Get the TODO items out of the code.
# - Add UID as the second argument.

# In-line configuration.  This could probably be split off into a config file.
files="/etc/passwd /etc/group /usr/local/etc/smb.conf"
ssh_options="-o BatchMode=yes"

# Global variables:
usage="Usage:\n  usercheck [-v | -b] [...] <username> <host1> [host2 ...]"
output=""
errors_encountered="no"
# Error status only gets set if there is an error.  (Not the same as no match.)
# If error_status is non-zero, it gets returned by this script.
error_status=0
# If error_status is zero, last_user_exists gets returned instead.  It should
# be 0 for true (user found) or 1 for false (user not found).
last_user_exists=1

# Options to be set by flags are initialized here.
verbose=no
boolean=no


# Function definitions.

function check_file {
  target_host="${1}"
  target_file="${2}"
  ssh_grep_ret=1

  output="$(
    ssh "${ssh_options}" "${target_host}" \
      grep -i -s \""${target_user}"\" \""${target_file}"\"
  )"
  ssh_grep_ret="${?}"

  return ${ssh_grep_ret}
}


# Process and discard option flags.
# Mind the leading spaces scattered in this area.  They prevent flag strings
# from being interpreted as option flags by echo.
flag=""
while echo " ${1}" | grep -q '^ -'; do

  if [ "" == "${flag}" ]; then
    flag="$(echo " ${1}" | sed 's/^ \(..\).*$/\1/')"
  fi

  case "${flag}" in
    "-v")
      verbose=yes
      ;;
    "-b")
      boolean=yes
      ;;
    *)
      echo -e "Unrecognized option:  '${flag}'"
      echo -e "${usage}" >&2
      exit 1
      ;;
  esac

  oldflag="${flag}"
  flag="$(
    echo " ${flag}" | sed 's/^\ \(-\).\(.\)/\1\2/'
  )"
  if [ " ${oldflag}" == "${flag}" ]; then
    flag=""
    shift
  fi

done


# After this point, we can make some assumptions about argument order:
# 1.  First argument is username.
# 2.  All remaining arguments are hosts to check.

# Bail if the user didn't supply enough arguments.
if [ 2 -gt "${#}" ]; then
  echo -e "${usage}" >&2
  exit 1
fi


# Set the username.
target_user="${1}"


# Since we shift'ed off the option flags, arguments starting with $2 should all
# be hostnames.
for target_host_index in $(seq 2 ${#}); do
  in_any_file="no"

  for target_file in ${files}; do

    # Mind the double dereference.
    check_file "${!target_host_index}" "${target_file}"
    check_file_ret="${?}"

    case "${check_file_ret}" in
      0)
        # Zero indicates success.
        in_any_file="yes"
        # File-by-file output:
        if [ "no" == "${boolean}" ]; then
          printf "MATCH:  %-23s %-23s %-23s\n" \
            "${!target_host_index}" \
            "${target_file}" \
            "${target_user}"
          if [ "yes" == "${verbose}" ]; then
            echo "${output}"
          fi
        fi
        ;;
      1)
        # 1 is probably from grep, just meaning no match.
        true
        ;;
      *)
        # Other return values indicate a problem like ssh failure.
        errors_encountered="yes"
        error_status="${check_file_ret}"
        ;;
    esac
  done

  # Report error status.
  if [ "yes" == "${errors_encountered}" ]; then
    echo "WARNING:  Caught code ${error_status} while checking ${target_file} on ${!target_host_index}."
  fi

  # Determine over-all whether the user exists.
  # Also the boolean output is tacked on, here.
  if [ "no" == "${in_any_file}" ]; then
    last_user_exists=1
    if [ "yes" == "${boolean}" ]; then
      printf "NO match:  %-23s\n" "${!target_host_index}"
    fi
  else
    last_user_exists=0
    if [ "yes" == "${boolean}" ]; then
      printf "MATCH:     %-23s\n" "${!target_host_index}"
    fi
  fi

done

if [ 0 == "${error_status}" ]; then
  exit "${last_user_exists}"
else
  exit "${error_status}"
fi
